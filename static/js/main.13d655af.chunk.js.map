{"version":3,"sources":["components/EditHomeWorkForm.jsx","components/TableToDoList.jsx","components/ModalNewHomeWork.jsx","componetsChallenge/To-do-list-three.jsx","App.js","serviceWorker.js","index.js"],"names":["EditHomeWorkForm","props","useForm","register","errors","handleSubmit","handleInputChange","e","target","name","value","setCurrentHomeWork","currentHomeWork","Modal","show","modal","Header","Title","Body","Form","onSubmit","datainf","console","log","abrirCerrar","className","Control","type","placeholder","onChange","ref","required","message","description","onClick","editHomeWork","setModal","TableToDoList","homeWorks","useState","scope","length","map","homeWork","key","id","deleteHomeWork","colSpan","newData","setHomeWorks","NewHomeWork","setmodal","Button","data","addHomeWork","reset","Todolist","TodoData","ModalNewHomeWork","uuidv4","filter","Textoimput","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.13d655af.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Modal } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst EditHomeWorkForm = (props) => {\r\n  const { register, errors, handleSubmit } = useForm();\r\n\r\n  const onSubmit = (datainf) => {\r\n    console.log(datainf);\r\n    props.abrirCerrar();\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    props.setCurrentHomeWork({ ...props.currentHomeWork, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal show={props.modal}>\r\n        <Modal.Header>\r\n          <Modal.Title>Editar Tarea</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"form-row\">\r\n              <div className=\"col\">\r\n                <label>Nombre de la tarea</label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Nombre\"\r\n                  name=\"name\"\r\n                  value={props.currentHomeWork && props.currentHomeWork.name}\r\n                  onChange={handleInputChange}\r\n                  ref={register({\r\n                    required: { value: true, message: \"Campo Requerido\" },\r\n                  })}\r\n                />\r\n                <span className=\"text-danger text-small\">\r\n                  {errors?.name?.message}\r\n                </span>\r\n              </div>\r\n              <div className=\"col\">\r\n                <label>Descripción de la tarea</label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"descripción\"\r\n                  name=\"description\"\r\n                  value={\r\n                    props.currentHomeWork && props.currentHomeWork.description\r\n                  }\r\n                  onChange={handleInputChange}\r\n                  ref={register({\r\n                    required: { value: true, message: \"Campo Requerido\" },\r\n                  })}\r\n                />\r\n                <span className=\"text-danger text-small\">\r\n                  {errors?.description?.message}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <button\r\n                className=\"btn btn-primary my-2\"\r\n                onClick={() => props.editHomeWork()}\r\n              >\r\n                Actualizar\r\n              </button>\r\n              <button\r\n                className=\"btn btn-warning\"\r\n                onClick={() => props.setModal(props.modal)}\r\n              >\r\n                Cancelar\r\n              </button>\r\n            </div>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditHomeWorkForm;\r\n","import React, { useState } from \"react\";\r\nimport EditHomeWorkForm from \"./EditHomeWorkForm\";\r\n\r\nconst TableToDoList = (props) => {\r\n  console.log(props.homeWorks);\r\n  const [modal, setModal] = useState(false);\r\n  const [currentHomeWork, setCurrentHomeWork] = useState(null);\r\n\r\n  const abrirCerrar = () => {\r\n    setModal(!modal);\r\n  };\r\n\r\n  const editHomeWork = () => {\r\n    const newData = props.homeWorks.map((homeWork) => {\r\n      if (homeWork.id === currentHomeWork.id) {\r\n        return currentHomeWork;\r\n      } else {\r\n        return homeWork;\r\n      }\r\n    });\r\n    props.setHomeWorks(newData);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <table className=\"table mt-6\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col-6\">Nombre</th>\r\n            <th scope=\"col-6\">Descripción</th>\r\n            <th scope=\"col-6\">Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.homeWorks.length > 0 ? (\r\n            props.homeWorks.map((homeWork) => (\r\n              <tr key={homeWork.id}>\r\n                <td>{homeWork.name}</td>\r\n                <td>{homeWork.description}</td>\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => {\r\n                      setCurrentHomeWork(homeWork);\r\n                      abrirCerrar();\r\n                    }}\r\n                  >\r\n                    Editar\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={() => {\r\n                      props.deleteHomeWork(homeWork.id);\r\n                    }}\r\n                  >\r\n                    Eliminar\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan={3}>No hay tareas</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <EditHomeWorkForm\r\n        modal={modal}\r\n        setModal={setModal}\r\n        abrirCerrar={abrirCerrar}\r\n        currentHomeWork={currentHomeWork}\r\n        setCurrentHomeWork={setCurrentHomeWork}\r\n        editHomeWork={editHomeWork}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableToDoList;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst NewHomeWork = (props) => {\r\n  const [modal, setmodal] = useState(false);\r\n  const { register, errors, handleSubmit } = useForm();\r\n\r\n  const abrirCerrar = () => {\r\n    setmodal(!modal);\r\n  };\r\n\r\n  const onSubmit = (data, e) => {\r\n    //console.log(data)\r\n    abrirCerrar();\r\n    props.addHomeWork(data);\r\n    //limpiar campos\r\n    e.target.reset();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button className=\"btn btn-primary\" onClick={() => abrirCerrar()}>\r\n        Crear Tarea\r\n      </Button>\r\n\r\n      <Modal show={modal}>\r\n        <Modal.Header>\r\n          <Modal.Title>Ingrese la Tarea a la Tabla</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"form-row\">\r\n              <div className=\"col\">\r\n                <label>Nombre de la tarea</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Nombre\"\r\n                  name=\"name\"\r\n                  ref={register({\r\n                    required: { value: true, message: \"Campo Requerido\" },\r\n                  })}\r\n                />\r\n                <div>{errors?.name?.message}</div>\r\n              </div>\r\n              <div className=\"col\">\r\n                <label>Descripción de la tarea</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"descripción\"\r\n                  name=\"description\"\r\n                  ref={register({\r\n                    required: { value: true, message: \"Campo Requerido\" },\r\n                  })}\r\n                />\r\n                <div>{errors?.description?.message}</div>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <button className=\"btn btn-primary my-2\">Agregar</button>\r\n              <button className=\"btn btn-warning\" onClick={() => abrirCerrar()}>\r\n                Cancelar\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewHomeWork;\r\n","import React, { useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport TableToDoList from \"../components/TableToDoList\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport ModalNewHomeWork from \"../components/ModalNewHomeWork\";\r\n\r\nfunction Todolist() {\r\n  const TodoData = [];\r\n\r\n  const [homeWorks, setHomeWorks] = useState(TodoData);\r\n\r\n  const addHomeWork = (homeWork) => {\r\n    homeWork.id = uuidv4();\r\n    setHomeWorks([...homeWorks, homeWork]);\r\n  };\r\n\r\n  const deleteHomeWork = (id) => {\r\n    setHomeWorks(homeWorks.filter((homeWork) => homeWork.id !== id));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <h1 className=\"col\">Lista De tareas</h1>\r\n        <div className=\"col mt-2\">\r\n          <ModalNewHomeWork addHomeWork={addHomeWork} />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div>\r\n          <TableToDoList\r\n            TodoData={TodoData}\r\n            homeWorks={homeWorks}\r\n            setHomeWorks={setHomeWorks}\r\n            deleteHomeWork={deleteHomeWork}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todolist;\r\n","import React from 'react';\r\nimport Todolist from './componetsChallenge/To-do-list-three';\r\n\r\nfunction Textoimput() {\r\n    return (\r\n      <div>\r\n        <Todolist />\r\n      </div>  \r\n    )\r\n  }\r\nexport default Textoimput;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}