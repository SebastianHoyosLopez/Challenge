{"version":3,"sources":["components/TableToDoList.jsx","components/ModalNewHomeWork.jsx","componetsChallenge/To-do-list-three.jsx","App.js","serviceWorker.js","index.js"],"names":["TableToDoList","props","console","log","homeWorks","className","scope","length","map","homeWork","key","id","name","description","colSpan","NewHomeWork","useState","modal","setmodal","useForm","register","errors","handleSubmit","abrirCerrar","Button","onClick","Modal","show","Header","Title","Body","onSubmit","data","e","addHomeWork","target","reset","type","placeholder","ref","required","value","message","Todolist","setHomeWorks","ModalNewHomeWork","uuidv4","Textoimput","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"kOA8BeA,G,MA5BO,SAACC,GAErB,OADAC,QAAQC,IAAIF,EAAMG,WAEhB,2BAAOC,UAAU,cACf,+BACE,4BACE,wBAAIC,MAAM,SAAV,UACA,wBAAIA,MAAM,SAAV,oBAGJ,+BACGL,EAAMG,UAAUG,OAAS,EACxBN,EAAMG,UAAUI,KAAI,SAACC,GAAD,OAClB,wBAAIC,IAAKD,EAASE,IAClB,4BAAKF,EAASG,MACd,4BAAKH,EAASI,iBAIhB,4BACE,wBAAIC,QAAS,GAAb,sB,gCCmDGC,EArEK,SAACd,GAAW,IAAD,MACHe,oBAAS,GADN,mBACtBC,EADsB,KACfC,EADe,OAEcC,cAAnCC,EAFqB,EAErBA,SAAUC,EAFW,EAEXA,OAAQC,EAFG,EAEHA,aAEpBC,EAAc,WAClBL,GAAUD,IAWZ,OACE,6BACE,kBAACO,EAAA,EAAD,CAAQnB,UAAU,kBAAkBoB,QAAS,kBAAMF,MAAnD,eAIA,kBAACG,EAAA,EAAD,CAAOC,KAAMV,GACX,kBAACS,EAAA,EAAME,OAAP,KACE,kBAACF,EAAA,EAAMG,MAAP,qCAEF,kBAACH,EAAA,EAAMI,KAAP,KACE,0BAAMC,SAAUT,GAnBP,SAACU,EAAMC,GACtB/B,QAAQC,IAAI6B,GACZ/B,EAAMiC,YAAYF,GAClBT,IAEAU,EAAEE,OAAOC,YAeD,yBAAK/B,UAAU,YACb,yBAAKA,UAAU,OACb,qDACA,2BACEgC,KAAK,OACLhC,UAAU,eACViC,YAAY,SACZ1B,KAAK,OACL2B,IAAKnB,EAAS,CACZoB,SAAU,CAAEC,OAAO,EAAMC,QAAS,uBAGtC,oCAAMrB,QAAN,IAAMA,GAAN,UAAMA,EAAQT,YAAd,aAAM,EAAc8B,UAEtB,yBAAKrC,UAAU,OACb,6DACA,2BACEgC,KAAK,OACLhC,UAAU,eACViC,YAAY,iBACZ1B,KAAK,cACL2B,IAAKnB,EAAS,CACZoB,SAAU,CAAEC,OAAO,EAAMC,QAAS,uBAGtC,oCAAMrB,QAAN,IAAMA,GAAN,UAAMA,EAAQR,mBAAd,aAAM,EAAqB6B,WAG/B,yBAAKrC,UAAU,gBACb,4BAAQA,UAAU,wBAAlB,WACA,4BAAQA,UAAU,kBAAkBoB,QAAS,kBAAMF,MAAnD,kBC7BCoB,MA3Bf,WACE,IADkB,EAGgB3B,mBAFjB,IADC,mBAGXZ,EAHW,KAGAwC,EAHA,KAUlB,OACE,yBAAKvC,UAAU,aACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,OAAd,mBACA,yBAAKA,UAAU,YACb,kBAACwC,EAAD,CAAkBX,YAVN,SAACzB,GACnBA,EAASE,GAAKmC,cACdF,EAAa,GAAD,mBAAKxC,GAAL,CAAgBK,UAW1B,6BACE,6BACE,kBAAC,EAAD,CAAeL,UAAWA,QCbrB2C,MAPf,WACI,OACE,6BACE,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAACC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMvB,c","file":"static/js/main.a3c1152a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst TableToDoList = (props) => {\r\n  console.log(props.homeWorks)\r\n  return (\r\n    <table className=\"table mt-6\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col-6\">Nombre</th>\r\n          <th scope=\"col-6\">Descripción</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.homeWorks.length > 0 ? (\r\n          props.homeWorks.map((homeWork) => (\r\n            <tr key={homeWork.id}>\r\n            <td>{homeWork.name}</td>\r\n            <td>{homeWork.description}</td>\r\n          </tr>\r\n          ))\r\n        ): (\r\n          <tr>\r\n            <td colSpan={3}>No hay tareas</td>\r\n          </tr>\r\n        )}          \r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default TableToDoList\r\n","import React, { useState } from 'react'\r\nimport { Button, Modal } from 'react-bootstrap'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nconst NewHomeWork = (props) => {\r\n  const [modal, setmodal] = useState(false)\r\n  const { register, errors, handleSubmit } = useForm()\r\n\r\n  const abrirCerrar = () => {\r\n    setmodal(!modal)\r\n  }\r\n\r\n  const onSubmit = (data, e) => {\r\n    console.log(data)\r\n    props.addHomeWork(data)\r\n    abrirCerrar()\r\n    //limpiar campos\r\n    e.target.reset()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button className=\"btn btn-primary\" onClick={() => abrirCerrar()}>\r\n        Crear Tarea\r\n      </Button>\r\n\r\n      <Modal show={modal}>\r\n        <Modal.Header>\r\n          <Modal.Title>Ingrese la Tarea a la Tabla</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"form-row\">\r\n              <div className=\"col\">\r\n                <label>Nombre de la tarea</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Nombre\"\r\n                  name=\"name\"\r\n                  ref={register({\r\n                    required: { value: true, message: 'Campo Requerido' },\r\n                  })}\r\n                />\r\n                <div>{errors?.name?.message}</div>\r\n              </div>\r\n              <div className=\"col\">\r\n                <label>Descripción de la tarea</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"descripción\"\r\n                  name=\"description\"\r\n                  ref={register({\r\n                    required: { value: true, message: 'Campo Requerido' },\r\n                  })}\r\n                />\r\n                <div>{errors?.description?.message}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <button className=\"btn btn-primary my-2\">Agregar</button>\r\n              <button className=\"btn btn-warning\" onClick={() => abrirCerrar()}>\r\n                Cancelar\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NewHomeWork\r\n","import React, { useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport TableToDoList from '../components/TableToDoList'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport ModalNewHomeWork from '../components/ModalNewHomeWork'\r\n\r\nfunction Todolist() {\r\n  const TodoData = []\r\n\r\n  const [homeWorks, setHomeWorks] = useState(TodoData)\r\n\r\n  const addHomeWork = (homeWork) => {\r\n    homeWork.id = uuidv4()\r\n    setHomeWorks([...homeWorks, homeWork])\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <h1 className=\"col\">Lista De tareas</h1>\r\n        <div className=\"col mt-2\">\r\n          <ModalNewHomeWork addHomeWork={addHomeWork} />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div>\r\n          <TableToDoList homeWorks={homeWorks} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todolist\r\n","import React from 'react';\r\nimport Todolist from './componetsChallenge/To-do-list-three';\r\n\r\nimport PracticeToDo from './practice/PracticeToDo';\r\n\r\n\r\nfunction Textoimput() {\r\n    return (\r\n      <div>\r\n        <Todolist />\r\n      </div>  \r\n    )\r\n  }\r\nexport default Textoimput;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}