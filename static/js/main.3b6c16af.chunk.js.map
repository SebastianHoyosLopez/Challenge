{"version":3,"sources":["components/EditHomeWorkForm.jsx","components/TableToDoList.jsx","components/ModalNewHomeWork.jsx","componetsChallenge/To-do-list-three.jsx","App.js","serviceWorker.js","index.js"],"names":["EditHomeWorkForm","props","useForm","register","errors","handleSubmit","handleInputChange","e","target","name","value","checked","type","setCurrentHomeWork","currentHomeWork","Modal","show","Form","onSubmit","data","console","log","handleClose","editHomeWork","Header","Title","Body","className","Control","placeholder","onChange","ref","required","message","description","Group","controlId","Check","label","checkep","Footer","Button","variant","onClick","TableToDoList","useState","setShow","handleShow","homeWorks","scope","length","map","homeWork","key","id","deleteHomeWork","colSpan","newData","setHomeWorks","NewHomeWork","addHomeWork","reset","Todolist","ModalNewHomeWork","uuidv4","filter","Textoimput","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3b6c16af.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst EditHomeWorkForm = (props) => {\r\n  const { register, errors, handleSubmit } = useForm();\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n    props.handleClose();\r\n    props.editHomeWork();\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    //const name = e.target.name;\r\n    //const value = e.target.value;\r\n    //const checked = e.target.checked;\r\n    //const type = e.target.type;\r\n    const { name, value, checked, type } = e.target;\r\n    props.setCurrentHomeWork({\r\n      ...props.currentHomeWork,\r\n      [name]: type === \"checkbox\" ? checked : value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={props.show}>\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Modal.Header>\r\n            <Modal.Title>Editar Tarea</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-row\">\r\n              <div className=\"col\">\r\n                <label>Nombre de la tarea</label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Nombre\"\r\n                  name=\"name\"\r\n                  value={props.currentHomeWork && props.currentHomeWork.name}\r\n                  onChange={handleInputChange}\r\n                  ref={register({\r\n                    required: { value: true, message: \"Campo Requerido\" },\r\n                  })}\r\n                />\r\n                <span className=\"text-danger text-small\">\r\n                  {errors?.name?.message}\r\n                </span>\r\n              </div>\r\n              <div className=\"col\">\r\n                <label>Descripción de la tarea</label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"descripción\"\r\n                  name=\"description\"\r\n                  value={\r\n                    props.currentHomeWork && props.currentHomeWork.description\r\n                  }\r\n                  onChange={handleInputChange}\r\n                  ref={register({\r\n                    required: { value: true, message: \"Campo Requerido\" },\r\n                  })}\r\n                />\r\n                <span className=\"text-danger text-small\">\r\n                  {errors?.description?.message}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <Form.Group controlId=\"formBasicCheckbox\">\r\n                <Form.Check\r\n                  name=\"checked\"\r\n                  type=\"checkbox\"\r\n                  label=\"Tarea completada\"\r\n                  checkep=\"false\"\r\n                  onChange={handleInputChange}\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Actualizar\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={props.handleClose}>\r\n              Cancelar\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditHomeWorkForm;\r\n","import React, { useState } from \"react\";\r\nimport EditHomeWorkForm from \"./EditHomeWorkForm\";\r\n\r\nconst TableToDoList = (props) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  console.log(props.homeWorks);\r\n  const [modal, setModal] = useState(false);\r\n  const [currentHomeWork, setCurrentHomeWork] = useState(null);\r\n\r\n  const abrirCerrar = () => {\r\n    setModal(!modal);\r\n  };\r\n\r\n  const editHomeWork = () => {\r\n    const newData = props.homeWorks.map((homeWork) => {\r\n      console.log(currentHomeWork);\r\n      if (homeWork.id === currentHomeWork.id) {\r\n        return currentHomeWork;\r\n      }\r\n      if (currentHomeWork.checked === true) {\r\n        return currentHomeWork;\r\n      } else {\r\n        return homeWork;\r\n      }\r\n    });\r\n    props.setHomeWorks(newData);\r\n    console.log(newData);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <table className=\"table mt-6\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col-6\">Nombre</th>\r\n            <th scope=\"col-6\">Descripción</th>\r\n            <th scope=\"col-6\">Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.homeWorks.length > 0 ? (\r\n            props.homeWorks.map((homeWork) => (\r\n              <tr\r\n                key={homeWork.id}\r\n                className={homeWork.checked ? \"homeWork-checked\" : \"\"}\r\n              >\r\n                <td>{homeWork.name}</td>\r\n                <td>{homeWork.description}</td>\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => {\r\n                      setCurrentHomeWork(homeWork);\r\n                      handleShow();\r\n                    }}\r\n                  >\r\n                    Editar\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={() => {\r\n                      props.deleteHomeWork(homeWork.id);\r\n                    }}\r\n                  >\r\n                    Eliminar\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan={3}>No hay tareas</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <EditHomeWorkForm\r\n        show={show}\r\n        setShow={setShow}\r\n        handleShow={handleShow}\r\n        handleClose={handleClose}\r\n        currentHomeWork={currentHomeWork}\r\n        setCurrentHomeWork={setCurrentHomeWork}\r\n        editHomeWork={editHomeWork}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableToDoList;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst NewHomeWork = (props) => {\r\n  const [show, setShow] = useState(false);\r\n  const { register, errors, handleSubmit } = useForm();\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const onSubmit = (data, e) => {\r\n    props.addHomeWork(data);\r\n    handleClose();\r\n    //limpiar campos\r\n    e.target.reset();\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <Button className=\"btn btn-secondary btn-lg\" onClick={handleShow}>\r\n        Create task\r\n      </Button>\r\n      <Modal show={show}>\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Modal.Header>\r\n            <Modal.Title>Register the table fields</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-row\">\r\n              <div className=\"col-6\">\r\n                <label>Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\" Name\"\r\n                  name=\"name\"\r\n                  ref={register({\r\n                    required: { value: true, message: \"Required field\" },\r\n                  })}\r\n                />\r\n                <div>{errors?.name?.message}</div>\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <label>Description</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\" Description\"\r\n                  name=\"description\"\r\n                  ref={register({\r\n                    required: { value: true, message: \"Required field\" },\r\n                  })}\r\n                />\r\n                <div>{errors?.description?.message}</div>\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default NewHomeWork;\r\n","import React, { useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport TableToDoList from \"../components/TableToDoList\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport ModalNewHomeWork from \"../components/ModalNewHomeWork\";\r\n\r\nfunction Todolist() {\r\n\r\n  const [homeWorks, setHomeWorks] = useState([]);\r\n\r\n  const addHomeWork = (homeWork) => {\r\n    homeWork.id = uuidv4();\r\n    setHomeWorks([...homeWorks, homeWork]);\r\n  };\r\n\r\n  const deleteHomeWork = (id) => {\r\n    setHomeWorks(homeWorks.filter((homeWork) => homeWork.id !== id));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <h1 className=\"col\">Lista De tareas</h1>\r\n        <div className=\"col mt-2\">\r\n          <ModalNewHomeWork addHomeWork={addHomeWork} />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div>\r\n          <TableToDoList\r\n            homeWorks={homeWorks}\r\n            setHomeWorks={setHomeWorks}\r\n            deleteHomeWork={deleteHomeWork}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todolist;\r\n","import React from 'react';\r\nimport Todolist from './componetsChallenge/To-do-list-three';\r\n\r\nfunction Textoimput() {\r\n    return (\r\n      <div>\r\n        <Todolist />\r\n      </div>  \r\n    )\r\n  }\r\nexport default Textoimput;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}