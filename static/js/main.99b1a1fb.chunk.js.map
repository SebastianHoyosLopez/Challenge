{"version":3,"sources":["componetsChallenge/Challenge-two.jsx","App.js","serviceWorker.js","index.js"],"names":["PersonList","useState","CovidCases","setCovidCases","textCity","setTextCity","date","setDate","className","placeholder","type","name","value","onChange","e","target","onClick","axios","get","then","res","data","scope","map","CovidCase","index","key","edad","sexo","tipo","estado","Textoimput","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAsFeA,MAnFf,WAAuB,IAAD,EACgBC,mBAAS,IADzB,mBACbC,EADa,KACDC,EADC,OAEYF,mBAAS,IAFrB,mBAEbG,EAFa,KAEHC,EAFG,OAGIJ,mBAAS,IAHb,mBAGbK,EAHa,KAGPC,EAHO,KAmBpB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,oBAAd,oEACiE,KAEjE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,2BACEA,UAAU,eACVC,YAAY,YACZC,KAAK,OACLC,KAAK,YACLC,MAAOR,EACPS,SAAU,SAACC,GACTT,EAAYS,EAAEC,OAAOH,WAI3B,yBAAKJ,UAAU,OACb,2BACEA,UAAU,eACVE,KAAK,OACLC,KAAK,WACLC,MAAON,EACPO,SAAU,SAACC,GACTP,EAAQO,EAAEC,OAAOH,WAIvB,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,kBAAkBQ,QA9C/B,WACfC,IACGC,IACC,wEACEd,EACA,sBACAE,EACA,iBAEHa,MAAK,SAACC,GACLjB,EAAciB,EAAIC,WAoCZ,WAIF,2BAAOb,UAAU,cACf,+BACE,4BACE,wBAAIc,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,YAGJ,+BACGpB,EAAWqB,KAAI,SAACC,EAAWC,GAC1B,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAUG,MACf,4BAAKH,EAAUI,MACf,4BAAKJ,EAAUK,MACf,4BAAKL,EAAUM,mBChEtBC,MAPf,WACI,OACE,6BACE,kBAAC,EAAD,QCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.99b1a1fb.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nfunction PersonList() {\r\n  const [CovidCases, setCovidCases] = useState([])\r\n  const [textCity, setTextCity] = useState('')\r\n  const [date, setDate] = useState('')\r\n\r\n  const getCovid = () => {\r\n    axios\r\n      .get(\r\n        'https://www.datos.gov.co/resource/gt2j-8ykr.json?ciudad_de_ubicaci_n=' +\r\n          textCity +\r\n          '&fecha_diagnostico=' +\r\n          date +\r\n          'T00:00:00.000',\r\n      )\r\n      .then((res) => {\r\n        setCovidCases(res.data)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <h4 className=\"my-5 text-center\">\r\n            Consulta sobre pacientes con Covid-19 en el Oriente Antioque√±o{' '}\r\n          </h4>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <input\r\n                className=\"form-control\"\r\n                placeholder=\"Municipio\"\r\n                type=\"text\"\r\n                name=\"cityinput\"\r\n                value={textCity}\r\n                onChange={(e) => {\r\n                  setTextCity(e.target.value)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col\">\r\n              <input\r\n                className=\"form-control\"\r\n                type=\"date\"\r\n                name=\"textdate\"\r\n                value={date}\r\n                onChange={(e) => {\r\n                  setDate(e.target.value)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col\">\r\n              <button className=\"btn btn-success\" onClick={getCovid}>\r\n                Buscar\r\n              </button>\r\n            </div>\r\n            <table className=\"table mt-3\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Edad</th>\r\n                  <th scope=\"col\">Sexo</th>\r\n                  <th scope=\"col\">Tipo</th>\r\n                  <th scope=\"col\">Estado</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {CovidCases.map((CovidCase, index) => {\r\n                  return (\r\n                    <tr key={index}>\r\n                      <td>{CovidCase.edad}</td>\r\n                      <td>{CovidCase.sexo}</td>\r\n                      <td>{CovidCase.tipo}</td>\r\n                      <td>{CovidCase.estado}</td>\r\n                    </tr>\r\n                  )\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default PersonList\r\n","import React from 'react';\nimport ChallengeTwo from './componetsChallenge/Challenge-two';\n\nfunction Textoimput() {\n    return (\n      <div>\n        <ChallengeTwo />\n      </div>  \n    )\n  }\nexport default Textoimput;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}